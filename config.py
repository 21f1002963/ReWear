# -*- encoding: utf-8 -*-
"""
Copyright (c) 2019 - present AppSeed.us
"""

import os, random, string
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class Config(object):

    basedir = os.path.abspath(os.path.dirname(__file__))

    # Assets Management
    ASSETS_ROOT = os.getenv('ASSETS_ROOT', '/static/assets')  
    
    # Set up the App SECRET_KEY
    SECRET_KEY  = os.getenv('SECRET_KEY', 'Secr3t_55xA') 

    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Check for DATABASE_URL first (common in cloud deployments)
    DATABASE_URL = os.getenv('DATABASE_URL')
    if DATABASE_URL:
        # Handle postgres:// URLs (some platforms use this instead of postgresql://)
        if DATABASE_URL.startswith('postgres://'):
            DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql://', 1)
        SQLALCHEMY_DATABASE_URI = DATABASE_URL
        USE_SQLITE = False
    else:
        # Fallback to individual environment variables
        DB_ENGINE   = os.getenv('DB_ENGINE'   , None)
        DB_USERNAME = os.getenv('DB_USERNAME' , None)
        DB_PASS     = os.getenv('DB_PASS'     , None)
        DB_HOST     = os.getenv('DB_HOST'     , None)
        DB_PORT     = os.getenv('DB_PORT'     , None)
        DB_NAME     = os.getenv('DB_NAME'     , None)

        USE_SQLITE  = True 

        # try to set up a Relational DBMS
        if DB_ENGINE and DB_NAME and DB_USERNAME:

            try:
                
                # Relational DBMS: PSQL, MySql
                SQLALCHEMY_DATABASE_URI = '{}://{}:{}@{}:{}/{}'.format(
                    DB_ENGINE,
                    DB_USERNAME,
                    DB_PASS,
                    DB_HOST,
                    DB_PORT,
                    DB_NAME
                ) 

                USE_SQLITE  = False

            except Exception as e:

                print('> Error: DBMS Exception: ' + str(e) )
                print('> Fallback to SQLite ')    

    if USE_SQLITE:

        # This will create a file in <app> FOLDER
        SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'db.sqlite3')
    
class ProductionConfig(Config):
    DEBUG = False

    # Security
    SESSION_COOKIE_HTTPONLY = True
    REMEMBER_COOKIE_HTTPONLY = True
    REMEMBER_COOKIE_DURATION = 3600
    SESSION_COOKIE_SECURE = True  # Only send cookies over HTTPS
    SESSION_COOKIE_SAMESITE = 'Lax'
    
    # Force HTTPS in production
    PREFERRED_URL_SCHEME = 'https'

class DebugConfig(Config):
    DEBUG = True


# Load all possible configurations
config_dict = {
    'Production': ProductionConfig,
    'Debug'     : DebugConfig
}
